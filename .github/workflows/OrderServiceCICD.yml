name: Basic CI

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Image tag to deploy "
        required: false
        default: ""
env:
  USER_DOCKER_HUB: ${{ secrets.REGISTRY }}
  JAVA_VERSION: "17"
  SERVICE_NAME: orderservice

jobs:
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build maven
        id: maven-build
        run: |
          cd OrderService
          mvn clean install -B -DskipTests > my_Log_Build.txt 2>&1
          tail -n 10 my_Log_Build.txt
          
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3
      #   with:
      #     category: "/language:java"   

      - name: Check Maven Build Status
        if: ${{ steps.maven-build.outcome != 'success' }} # Kiểm tra nếu Maven thất bại
        run: |
          echo "Maven build failed. Please check the logs above for details."
          exit 1  # Dừng pipeline nếu Maven lỗi

      - name: Set Version
        id: set-version
        run: |
          echo "VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWD }}

      - name: Build Docker image
        if: ${{ steps.maven-build.outcome == 'success' }}
        run: |
          cd OrderService
          docker build -t ${{ secrets.REGISTRY }}/${{ env.SERVICE_NAME }}:${{ steps.set-version.outputs.version }} .
           

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.REGISTRY }}/${{ env.SERVICE_NAME }}:${{ steps.set-version.outputs.version }}
          
  Config-k8s:
    runs-on: Linux-Rancher
    needs: [build-docker]
    steps:
      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

          kubectl cluster-info
          kubectl get nodes
          
  Deploy-k8s:
    runs-on: Linux-Rancher
    needs: [build-docker, Config-k8s]
    steps:
      - name: Checkout Helm Charts
        uses: actions/checkout@v4
        with:
          repository: Tam-Half/Microservice_k8s
          path: helm-charts
          fetch-depth: 1
    
      - name: Deploy
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          PORT_SERVICE: ${{ secrets.PORT_SERVICE }}
          PORT_TARGET: ${{ secrets.PORT_TARGET }}
          DOCKER_NAMESERVICE: ${{ secrets.DOCKER_NAMESERVICE }}
          REGISTRY: ${{ secrets.REGISTRY }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          SERVER_STORAGE: ${{ secrets.SERVER_STORAGE }}
          PORT_CONTAINER_DEPLOYMENT: ${{ secrets.PORT_CONTAINER_DEPLOYMENT }}
        run: |
          envsubst < ./helm-charts/values/values-order.yaml \
          > ./helm-charts/values/order-values.generated.yaml
          
          helm upgrade --install orderservice ./helm-charts \
          -f ./helm-charts/values/order-values.generated.yaml \
          --namespace testing \
          --create-namespace

 
